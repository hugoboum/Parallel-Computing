system.time({cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),eps = 1e-4,kf = 3)})
system.time({cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),eps = 1e-3,kf = 3)})
cv.err
system.time({cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),eps = 1e-2,kf = 3)})
cv.err
1e-3
5e-4
5e-3
system.time({cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),eps = 5e-4,kf = 3)})
cv.err
colnames(data$x)
names(data$x)
list(2)
list(1:10)
list(1:10,1:10)
d = list(1:10,1:10)
length(d)
d[[1]]
seq(p)
View(rlogit)
seq(ncol(data$x))
cut(seq(ncol(data$x)),breaks = ncol(data$x) / 2)
cut(seq(ncol(data$x)),breaks = ncol(data$x) / 2,labels = FALSE)
subsets = cut(seq(ncol(data$x)),breaks = ncol(data$x) / 2,labels = FALSE)
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / 2,labels = FALSE)
subsets = list(ncol(data$x) / 2)
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',size = (ncol(data$x) / k))
subsets = vector('list',length = (ncol(data$x) / k))
which(s==1)
which(s==2)
which(s==3)
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',length = (ncol(data$x) / k))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
source('./basics.R')
source('./basics.R')
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), eps =1e-3 ,kf = 3)
models[[i]]
source('./basics.R')
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), eps =1e-3 ,kf = 3)
models[[which.min(models.errs)]]
source('./basics.R')
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), eps =1e-3 ,kf = 3)
list('vars'=models[[which.min(models.errs)]],'cv.err'= models.errs[which.min(models.errs)])
source('./basics.R')
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), eps =1e-3 ,kf = 3)
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
k=2
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 100)})
beta_s
dat = data.frame(cbind(data$x[,1:k],data$y))
names = c(paste('x',1:k,sep = ''),'y')
colnames(dat) = names
system.time({g=glm(formula = y~.-1 ,family = binomial(link="logit") ,data = dat,start = rep(1,k))})
g$coefficients
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 1000)})
beta_s
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 1e5)})
beta_s
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 1e4)})
beta_s
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 5e4)})
beta_s
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
beta_s
g$coefficients
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 2e4)})
beta_s
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 3e4)})
beta_s
g$coefficients
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
beta_s
k=6
dat = data.frame(cbind(data$x[,1:k],data$y))
names = c(paste('x',1:k,sep = ''),'y')
colnames(dat) = names
system.time({g=glm(formula = y~.-1 ,family = binomial(link="logit") ,data = dat,start = rep(1,k))})
g$coefficients
k=3
dat = data.frame(cbind(data$x[,1:k],data$y))
names = c(paste('x',1:k,sep = ''),'y')
colnames(dat) = names
system.time({g=glm(formula = y~.-1 ,family = binomial(link="logit") ,data = dat,start = rep(1,k))})
g$coefficients
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
beta_s
beta_s*4
185.81130 / 17.337074
beta_s*10.71757
g$coefficients
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 5e4)})
beta_s
185.81130 / 19.743933
beta_s*9.411058
g$coefficients
k=6
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
beta_s
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e5)})
beta_s
beta_s/10
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
k=2
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
beta_s
dat = data.frame(cbind(data$x[,1:k],data$y))
names = c(paste('x',1:k,sep = ''),'y')
colnames(dat) = names
system.time({g=glm(formula = y~.-1 ,family = binomial(link="logit") ,data = dat,start = rep(1,k))})
g$coefficients
source('./basics.R')
p= profvis({
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
})
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
source('./basics.R')
p= profvis({
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
})
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
View(rhapson_newton)
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
source('./basics.R')
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
k=2
source('./basics.R')
p= profvis({
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
})
htmltools::save_html(p,'run7a.html')
cv.err
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',length = (ncol(data$x) / k))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
p= profvis({
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
})
htmltools::save_html(p,'run7b.html')
selected.model
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
#Rhapson-Newton algorithm with number of iterations as stopping criterion
k=2
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
#Rhapson-Newton algorithm with number of iterations as stopping criterion
k=2
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4)})
beta_s
dat = data.frame(cbind(data$x[,1:k],data$y))
names = c(paste('x',1:k,sep = ''),'y')
colnames(dat) = names
system.time({g=glm(formula = y~.-1 ,family = binomial(link="logit") ,data = dat,start = rep(1,k))})
g$coefficients
source('./basics.R')
p= profvis({
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
})
htmltools::save_html(p,'run7a.html')
cv.err
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',length = (ncol(data$x) / k))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
subsets
subsets
p= profvis({
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
})
htmltools::save_html(p,'run7b.html')
selected.model
as.matrix(rep(1,length(1:10))
)
6/1
6/2
6/3
6/4
test = vector('list',length = (ncol(1:10)))
test = vector('list',length = ncol(1:10))
test = vector('list',length = 10)
test= 1:10
data$X[,c(1,2)]
data$x[,c(1,2)]
data$x[,c(1,1)]
x=data$x
s = cut(seq(ncol(x)),breaks = ncol(x),labels = FALSE)
subsets = vector('list',length = (ncol(x)))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
subsets[[1]]
subsets = vector('list',length = ncol(x))
for (i in 1:length(subsets)) {
subsets[[i]] = i
}
while ((d_cv.err > 0) & (t < ncol(x))) {
t=t+1
}
source('./basics.R')
selected.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
x[1]
c(x[1]) == x[1]
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
y=data$y
as.matrix(rep(1,length(y)),ncol=1)
its=4e4
kf=3
cv.err = basic.cv(x =as.matrix(rep(1,length(y)),ncol=1) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
betaO = as.matrix(rep(1,ncol(x))),
betaO = as.matrix(rep(1,ncol(x)))
selected.model = basic.modelcomparison(x = x,models = subsets,y = y,betaO = betaO[1:length(subsets[[1]])],its = its,kf = kf)
cv.err = basic.cv(x =as.matrix(rep(1,length(y)),ncol=1) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
as.matrix(rep(1,length(y)) %*% c(1)
as.matrix(rep(1,length(y))) %*% c(1)
as.matrix(rep(1,length(y))) %*% c(1)
betaO[1]
cv.err = basic.cv(x =as.matrix(rep(1,length(y)),ncol=1) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
as.matrix(rep(1,length(y))) %*% betaO[1]
as.matrix(rep(1,length(y)))[1:10,] %*% betaO[1]
as.matrix(rep(1,length(y)))[1:10] %*% betaO[1]
as.matrix(rep(1,length(y)))[1:10]
as.matrix(rep(1,length(y)),ncol=1)[1:10]
as.matrix(rep(1,length(y)),ncol=1)
as.matrix(rep(1,length(y)))[1:10] %*% betaO[1]
as.matrix(rep(1,length(y))) %*% betaO[1]
as.matrix(as.matrix(rep(1,length(y)))[1:10]) %*% betaO[1]
cv.err = basic.cv(x =as.matrix(rep(1,length(y)),ncol=1) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
as.matrix(rep(1,length(y))) %*% betaO[1]
as.matrix(rep(1,length(y))) %*% betaO[1]
as.matrix(rep(1,length(y)))[1:10] %*% betaO[1]
as.matrix(as.matrix(rep(1,length(y)))[1:10]) %*% betaO[1]
as.matrix(as.matrix(rep(1,length(y)))[1:10],) %*% betaO[1]
as.matrix(as.matrix(rep(1,length(y)))[1:10],) %*% betaO[1]
cv.err = basic.cv(x =as.matrix(rep(1,length(y))) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
cv.err = basic.cv(x =as.matrix(rep(1,length(y))) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
cv.err = basic.cv(x =as.matrix(rep(1,length(y))) ,y = y,betaO = betaO[1] ,its = its,kf=kf)
p= profvis({
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
})
source('./basics.R')
p= profvis({
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
})
cv.err
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',length = (ncol(data$x) / k))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
subsets
p= profvis({
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
})
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
x[train.ind,]
length(x[train.ind,])
x[train.ind,] %*% betaO
as.matrix(x[train.ind,]) %*% betaO
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
C(1,2,3)[1:1]
c(1,2,3)[1:1]
p= profvis({
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
})
View(g)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
ncol(x)
data[1:2,]
data$x[1:2,]
nrow(data$x[,1:2])
nrow(data$x)
nrow(data$x[,1])
length(data$x[,1])
length(data$x[,1:2])
source('./basics.R')
p= profvis({
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
})
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
x
x[train.ind,]
as.matrix(x)[train.ind,]
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
train.ind
train.ind
train.ind
betaO
as.matrix(x[train.ind,])
as.matrix(x[train.ind,]) %*% betaO
as.matrix(x[train.ind,]) %*% betaO[1]
test = as.matrix(rep(1,ncol(x)))
as.matrix(test[1;1])
as.matrix(test[1:1])
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
as.matrix(betaO[1:t+1])
betaO[1:t+1]
t
t+1
betaO[1:(t+1)]
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
x[,subsets[[1]]]
c(1,2,3)[-1]
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
length(test)
length(unique(test))
source('./basics.R')
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
sort(c(3,2,1))
library(profvis)
library(MASS)
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
#Rhapson-Newton algorithm with number of iterations as stopping criterion
k=2
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(x))), its = 4e4 ,kf = 3)
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
1:10[-1]
1:10
1:10[1]
1:10[[1]]
c(1,2,3)[1]
c(1,2,3)[-1]
c(1:10)[1]
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
source('./basics.R')
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
source('./basics.R')
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
as.matrix(betaO[1:(length(betaO)-(t+1))])
source('./basics.R')
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
as.matrix(betaO[1:(length(betaO)-(t+1))])
1:1
1:2
source('./basics.R')
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
source('./basics.R')
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
p= profvis({
forward.model =  basic.modelselection(x = data$x,y = data$y,forward = TRUE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
})
htmltools::save_html(p,'run7c.html')
forward.model
p= profvis({
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
})
htmltools::save_html(p,'run7d.html')
backward.model
source('./basics.R')
p= profvis({
backward.model =  basic.modelselection(x = data$x,y = data$y,forward = FALSE,betaO = as.matrix(rep(1,ncol(data$x))), its = 4e4 ,kf = 3)
})
htmltools::save_html(p,'run7d.html')
backward.model
set.seed(123)
library(profvis)
library(MASS)
library(parallel)
source('./datagen.R')
source('./aux_fcts_6.R')
n = 100
p=6
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
k=2
p= profvis({
hessian(x_sub = data$x[,1:2],y = data$y,beta = as.matrix(rep(1,2)))
})
htmltools::save_html(p,'run6_a.html')
loglikl(x_sub = data$x[,1:2],y = data$y,beta = as.matrix(rep(1,2)))
gradient(x_sub = data$x[,1:2],y = data$y,beta = as.matrix(rep(1,2)))
hessian(x_sub = data$x[,1:2],y = data$y,beta = as.matrix(rep(1,2)))
system.time({beta_s =  rhapson_newton(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),eps = 1e-6)})
beta_s
source('./aux_fcts_2b.R')
p= profvis({
hessian(x_sub = data$x[,1:2],y = data$y,beta = as.matrix(rep(1,2)))
})
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',length = (ncol(data$x) / k))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
subsets
set.seed(123)
library(profvis)
library(MASS)
source('./datagen.R')
source('./aux_fcts_2b.R')
n = 100
beta = as.matrix(c(10,5,1,0,0,0))
data = rlogit(nobs = n,beta = beta)
#Rhapson-Newton algorithm with number of iterations as stopping criterion
k=2
s = cut(seq(ncol(data$x)),breaks = ncol(data$x) / k,labels = FALSE)
subsets = vector('list',length = (ncol(data$x) / k))
for (i in 1:length(subsets)) {
subsets[[i]] = which(s==i)
}
subsets
typeof(subsets)
source('./basics.R')
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 3)
selected.model = basic.modelcomparison(x = data$x,models = subsets,y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
selected.model = basic.modelcomparison(x = data$x,models = c(1:10),y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
source('./basics.R')
selected.model = basic.modelcomparison(x = data$x,models = c(1:10),y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
selected.model = basic.modelcomparison(x = data$x,models = c(1:10),y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
source('./basics.R')
selected.model = basic.modelcomparison(x = data$x,models = c(1:10),y = data$y,betaO = as.matrix(rep(1,k)), its = 4e4 ,kf = 3)
cut(seq(length(c(1:10))),breaks = 10,labels = FALSE)
cut(seq(length(c(1:10))),breaks = 9,labels = FALSE)
source('./basics.R')
#EXCEPTIONS
#Check the number of folds in basic.cv
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = 7)
#EXCEPTIONS
#Check the number of folds in basic.cv
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = n+1)
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = n)
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e4,kf = n)
#Warn of LOOCV
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e2,kf = n)
source('./basics.R')
#Warn of LOOCV
cv.err = basic.cv(x = data$x[,1:k],y = data$y,betaO = as.matrix(rep(1,k)),its = 4e2,kf = n)
